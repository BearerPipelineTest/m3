// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/dbnode/generated/proto/annotation/annotation.proto

// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
	Package annotation is a generated protocol buffer package.

	It is generated from these files:
		github.com/m3db/m3/src/dbnode/generated/proto/annotation/annotation.proto

	It has these top-level messages:
		Payload
*/
package annotation

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MetricType int32

const (
	MetricType_UNKNOWN          MetricType = 0
	MetricType_COUNTER          MetricType = 1
	MetricType_GAUGE            MetricType = 2
	MetricType_HISTOGRAM        MetricType = 3
	MetricType_GAUGE_HISTOGRAM  MetricType = 4
	MetricType_SUMMARY          MetricType = 5
	MetricType_INFO             MetricType = 6
	MetricType_STATESET         MetricType = 7
	MetricType_GRAPHITE_COUNTER MetricType = 8
	MetricType_GRAPHITE_GAUGE   MetricType = 9
	MetricType_GRAPHITE_TIMER   MetricType = 10
)

var MetricType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "COUNTER",
	2:  "GAUGE",
	3:  "HISTOGRAM",
	4:  "GAUGE_HISTOGRAM",
	5:  "SUMMARY",
	6:  "INFO",
	7:  "STATESET",
	8:  "GRAPHITE_COUNTER",
	9:  "GRAPHITE_GAUGE",
	10: "GRAPHITE_TIMER",
}
var MetricType_value = map[string]int32{
	"UNKNOWN":          0,
	"COUNTER":          1,
	"GAUGE":            2,
	"HISTOGRAM":        3,
	"GAUGE_HISTOGRAM":  4,
	"SUMMARY":          5,
	"INFO":             6,
	"STATESET":         7,
	"GRAPHITE_COUNTER": 8,
	"GRAPHITE_GAUGE":   9,
	"GRAPHITE_TIMER":   10,
}

func (x MetricType) String() string {
	return proto.EnumName(MetricType_name, int32(x))
}
func (MetricType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAnnotation, []int{0} }

type Payload struct {
	MetricType        MetricType `protobuf:"varint,1,opt,name=metric_type,json=metricType,proto3,enum=annotation.MetricType" json:"metric_type,omitempty"`
	HandleValueResets bool       `protobuf:"varint,2,opt,name=handle_value_resets,json=handleValueResets,proto3" json:"handle_value_resets,omitempty"`
}

func (m *Payload) Reset()                    { *m = Payload{} }
func (m *Payload) String() string            { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()               {}
func (*Payload) Descriptor() ([]byte, []int) { return fileDescriptorAnnotation, []int{0} }

func (m *Payload) GetMetricType() MetricType {
	if m != nil {
		return m.MetricType
	}
	return MetricType_UNKNOWN
}

func (m *Payload) GetHandleValueResets() bool {
	if m != nil {
		return m.HandleValueResets
	}
	return false
}

func init() {
	proto.RegisterType((*Payload)(nil), "annotation.Payload")
	proto.RegisterEnum("annotation.MetricType", MetricType_name, MetricType_value)
}
func (m *Payload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MetricType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnnotation(dAtA, i, uint64(m.MetricType))
	}
	if m.HandleValueResets {
		dAtA[i] = 0x10
		i++
		if m.HandleValueResets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintAnnotation(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Payload) Size() (n int) {
	var l int
	_ = l
	if m.MetricType != 0 {
		n += 1 + sovAnnotation(uint64(m.MetricType))
	}
	if m.HandleValueResets {
		n += 2
	}
	return n
}

func sovAnnotation(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAnnotation(x uint64) (n int) {
	return sovAnnotation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Payload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnnotation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricType", wireType)
			}
			m.MetricType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnotation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetricType |= (MetricType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleValueResets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnotation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HandleValueResets = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAnnotation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnnotation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnnotation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnnotation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnnotation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnnotation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAnnotation
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAnnotation
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAnnotation(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAnnotation = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnnotation   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/dbnode/generated/proto/annotation/annotation.proto", fileDescriptorAnnotation)
}

var fileDescriptorAnnotation = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xcf, 0x6a, 0xea, 0x40,
	0x18, 0xc5, 0x1d, 0xaf, 0x7f, 0xe2, 0xe7, 0xbd, 0xde, 0xe9, 0x58, 0x8a, 0xab, 0x20, 0x5d, 0x49,
	0x17, 0x09, 0xd4, 0x45, 0xd7, 0x69, 0x49, 0x63, 0x28, 0x49, 0x64, 0x32, 0x69, 0xe9, 0x2a, 0x4c,
	0xcc, 0xa0, 0x82, 0xc9, 0x48, 0x1c, 0x0b, 0xbe, 0x45, 0x1f, 0xa7, 0x8f, 0xd0, 0x65, 0x1f, 0xa1,
	0xd8, 0x17, 0x29, 0x46, 0xaa, 0x76, 0x77, 0xe6, 0xf7, 0xe3, 0xcc, 0x81, 0x0f, 0xdc, 0xe9, 0x5c,
	0xcd, 0xd6, 0x89, 0x31, 0x91, 0x99, 0x99, 0x0d, 0xd3, 0xc4, 0xcc, 0x86, 0xe6, 0xaa, 0x98, 0x98,
	0x69, 0x92, 0xcb, 0x54, 0x98, 0x53, 0x91, 0x8b, 0x82, 0x2b, 0x91, 0x9a, 0xcb, 0x42, 0x2a, 0x69,
	0xf2, 0x3c, 0x97, 0x8a, 0xab, 0xb9, 0xcc, 0x4f, 0xa2, 0x51, 0x3a, 0x02, 0x47, 0x72, 0x59, 0x40,
	0x73, 0xcc, 0x37, 0x0b, 0xc9, 0x53, 0x72, 0x03, 0xed, 0x4c, 0xa8, 0x62, 0x3e, 0x89, 0xd5, 0x66,
	0x29, 0x7a, 0xa8, 0x8f, 0x06, 0x9d, 0xeb, 0x0b, 0xe3, 0xa4, 0xee, 0x95, 0x9a, 0x6d, 0x96, 0x82,
	0x42, 0x76, 0xc8, 0xc4, 0x80, 0xee, 0x8c, 0xe7, 0xe9, 0x42, 0xc4, 0x2f, 0x7c, 0xb1, 0x16, 0x71,
	0x21, 0x56, 0x42, 0xad, 0x7a, 0xd5, 0x3e, 0x1a, 0x68, 0xf4, 0x6c, 0xaf, 0x1e, 0x77, 0x86, 0x96,
	0xe2, 0xea, 0x0d, 0x01, 0x1c, 0xbf, 0x22, 0x6d, 0x68, 0x46, 0xfe, 0x83, 0x1f, 0x3c, 0xf9, 0xb8,
	0xb2, 0x7b, 0xdc, 0x05, 0x91, 0xcf, 0x6c, 0x8a, 0x11, 0x69, 0x41, 0xdd, 0xb1, 0x22, 0xc7, 0xc6,
	0x55, 0xf2, 0x0f, 0x5a, 0x23, 0x37, 0x64, 0x81, 0x43, 0x2d, 0x0f, 0xff, 0x21, 0x5d, 0xf8, 0x5f,
	0x9a, 0xf8, 0x08, 0x6b, 0xbb, 0x6e, 0x18, 0x79, 0x9e, 0x45, 0x9f, 0x71, 0x9d, 0x68, 0x50, 0x73,
	0xfd, 0xfb, 0x00, 0x37, 0xc8, 0x5f, 0xd0, 0x42, 0x66, 0x31, 0x3b, 0xb4, 0x19, 0x6e, 0x92, 0x73,
	0xc0, 0x0e, 0xb5, 0xc6, 0x23, 0x97, 0xd9, 0xf1, 0xcf, 0x92, 0x46, 0x08, 0x74, 0x0e, 0x74, 0x3f,
	0xd9, 0xfa, 0xc5, 0x98, 0xeb, 0xd9, 0x14, 0xc3, 0x2d, 0x7e, 0xdf, 0xea, 0xe8, 0x63, 0xab, 0xa3,
	0xcf, 0xad, 0x8e, 0x5e, 0xbf, 0xf4, 0x4a, 0xd2, 0x28, 0x6f, 0x3a, 0xfc, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0x65, 0xc9, 0xa2, 0x61, 0xa0, 0x01, 0x00, 0x00,
}
