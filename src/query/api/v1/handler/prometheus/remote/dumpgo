// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package remote

import (
	"errors"
	"fmt"
	"net/http"

	"github.com/m3db/m3/src/query/executor"
	"github.com/m3db/m3/src/query/generated/proto/prompb"
	"github.com/m3db/m3/src/query/models"
	pql "github.com/prometheus/prometheus/promql"
	"go.uber.org/zap"
)

func parseReqQuery(
	r *http.Request,
	engine executor.Engine,
	logger *zap.Logger,
) (prompb.ReadRequest, error) {
	err := r.ParseForm()
	if err != nil {
		return prompb.ReadRequest{}, err
	}

	query := r.FormValue("query")
	expr, err := pql.ParseExpr(query)
	if err != nil {
		return prompb.ReadRequest{}, err
	}

	pql.Inspect()
	matchers, err := walk(expr, make([]models.Matchers, 0, 1))
	if err != nil {
		return prompb.ReadRequest{}, err
	}

	return prompb.ReadRequest{
		Queries: []*prompb.Query{},
	}, nil
}

func walk(node pql.Node, matchers []models.Matchers) ([]models.Matchers, error) {
	if node == nil {
		return matchers, nil
	}

	switch n := node.(type) {
	case *pql.AggregateExpr:
		return walk(n.Expr, matchers)

	case *pql.MatrixSelector:
		promql.LabelMatchersToModelMatcher()
		operation, err := NewSelectorFromMatrix(n, p.tagOpts)
		if err != nil {
			return nil, err
		}

		f, ok := operation.(functions.FetchOp)
		if ok {
			return nil, errors.New("bad format")
		}

		return append(matchers, f.Matchers), nil

	case *pql.VectorSelector:
		operation, err := NewSelectorFromVector(n, p.tagOpts)
		if err != nil {
			return nil, err
		}

		f, ok := operation.(functions.FetchOp)
		if ok {
			return nil, errors.New("bad format")
		}

		return append(matchers, f.Matchers), nil

	case *pql.Call:
		return matchers, nil

	case *pql.BinaryExpr:
		var err error
		matchers, err = walk(n.LHS, matchers)
		if err != nil {
			return nil, err
		}

		return walk(n.RHS, matchers)

	case *pql.NumberLiteral:
		return matchers, nil

	case *pql.ParenExpr:
		return p.walk(n.Expr, matchers)

	case *pql.UnaryExpr:
		return p.walk(n.Expr, matchers)

	default:
		return nil, fmt.Errorf("promql.Walk: unhandled node type %T, %v", node, node)
	}
}
